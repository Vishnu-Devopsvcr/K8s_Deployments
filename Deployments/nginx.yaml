apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user  root;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  2048;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        map $status $abnormal {
                ~^(200|304)  0;
                default 1;
        }
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
                      #access_log  /var/log/nginx/access.log  combined if=$abnormal;
        access_log /var/log/nginx/access.log main;
        sendfile        on;
        keepalive_timeout  65;
        server_tokens off;
        gzip on;
        gzip_types *;
        gzip_proxied expired no-cache no-store private auth;
        gzip_vary on;
        include /etc/nginx/conf.d/*.conf;
    }

  default.conf: |
    upstream uwsgi {
      #server unix:/var/run/app/app.sock; # for a file socket
      #server 127.0.0.1:8001;
      server app:8001;
    }
    #upstream app_cdr {
    #  server app2:8001;
    #}
    upstream socket_ws {
      ip_hash;
      server  socket:3233; # Mention WebSocket Server IP address/domain name
    }

    # configuration of the server
    server {
        listen    80;
        location /nginx/status {
          stub_status on;
          # access_log /usr/local/nginx/logs/status.log;
          access_log off;
          auth_basic "NginxStatus";
        }
        location /static/index.html {
          access_log off;
          include /etc/nginx/uwsgi_params;
          uwsgi_pass uwsgi;
        }
        location /healthy {
          access_log off;
          include /etc/nginx/uwsgi_params;
          uwsgi_pass uwsgi;
        }
        location /socket.io {
          proxy_pass  https://socket_ws;
          proxy_set_header Host            $host;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_read_timeout 86400;
        }
        location / {
          include     /etc/nginx/uwsgi_params; # the uwsgi_params file you installed
          uwsgi_pass  uwsgi;
          proxy_set_header Host            $host;
          proxy_set_header X-Forwarded-For $remote_addr;
        }

        #return 301 https://$host$request_uri;
    }
    # configuration of the server
    server {
      listen 443 default_server ssl;
      add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
      add_header Content-Security-Policy "default-src 'self'; media-src https://storage.googleapis.com/ https://connect.hdfcsec.com/; connect-src ws: wss: 'self'; font-src 'self'; img-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'";
      add_header X-XSS-Protection "1; mode=block";
      add_header X-Content-Type-Options nosniff;
      add_header Referrer-Policy "strict-origin";
      add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()";
      ssl_certificate /etc/ssl/tls.crt;
      ssl_certificate_key /etc/ssl/tls.key;
      #ssl_protocols TLSv1.2 TLSv1.3;
      #ssl_certificate /etc/ssl/wss.pem;
      #ssl_certificate_key /etc/ssl/wss.pem;
      charset     utf-8;
      client_max_body_size 75M;   # adjust to taste
      client_body_timeout 300s;
      uwsgi_read_timeout 300s;
      location /nginx/status {
          stub_status on;
          # access_log /usr/local/nginx/logs/status.log;
          access_log off;
          auth_basic "NginxStatus";
      }
      location / {
          include     /etc/nginx/uwsgi_params; # the uwsgi_params file you installed
          uwsgi_pass  uwsgi;
          proxy_set_header Host            $host;
          proxy_set_header X-Forwarded-For $remote_addr;
      }
      location /socket.io {
          proxy_pass  https://socket_ws;
          proxy_set_header Host            $host;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_read_timeout 86400;
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 5
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: marketplace.gcr.io/google/nginx1:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /static/index.html
            port: 80
            httpHeaders:
          initialDelaySeconds: 1
          periodSeconds: 3600
          timeoutSeconds: 20
        readinessProbe:
          httpGet:
            path: /static/index.html
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 20
          timeoutSeconds: 20
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "400m"
            memory: "1024Mi"
        ports:
          - name: https
            containerPort: 443
          - name: http
            containerPort: 80
        volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
              readOnly: true
            - mountPath: /etc/ssl
              name: nginx-certs-volumes
      volumes:
      - name: nginx-certs-volumes
        secret:
           secretName: flexy-crt
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf
            - key: default.conf
              path: default.conf
---
apiVersion: v1
kind: Service
metadata:
  name: nginxsvc
  labels:
    app: nginx
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  type: NodePort
  ports:
    - port: 443
      protocol: TCP
      name: https
    - port: 80
      protocol: TCP
      name: http
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - name: https
      port: 443
      targetPort: 443
  type: ClusterIP
